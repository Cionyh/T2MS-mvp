generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  role          String?

  clients Client[] @relation("UserClients") 

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Client {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation("UserClients", fields: [userId], references: [id], onDelete: Cascade)
  name                String
  domain              String    @unique
  phone               String    @unique

  // Defaults for messages
  defaultType         String?   @default("banner")      // fallback type if message.type not set
  defaultBgColor      String?   @default("#222")
  defaultTextColor    String?   @default("#fff")
  defaultFont         String?   @default("sans-serif")
  defaultDismissAfter Int?      @default(5000)           // milliseconds
  pinned              Boolean   @default(false)

  // Widget configuration settings
  widgetConfig        Json?     @default("{}")           // JSON object containing all widget customization settings

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  messages            Message[]
}

model Message {
  id           String   @id @default(cuid())
  content      String
  createdAt    DateTime @default(now())
  clientId     String
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}
